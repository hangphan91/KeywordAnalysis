@page "/DoughnutChart"
@page "/DoughnutChart/{JobTitle}"
@inject HttpClient Http
@using System.Net.Http.Json;
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.Sample.Shared.Services

<h2 class="text-center">Doughnut Chart for Popular Words in @JobTitle's Job Description</h2>
<br />
<Chart @ref="_doughnutChartJs"
       Config="@_config"
       TConfig="PieConfig"
       Width="600"
       Height="300" />

@code {
    [Parameter]
    public string JobTitle { get; set; }
    private PieConfig _config;
    private Chart<PieConfig> _doughnutChartJs;
    public List<ResultsTable> ToDisplay { get; set; } = new List<ResultsTable>();

    protected override async Task OnInitializedAsync()
    {
        string path = "JsonFolder/results.json";
        var Results = await Http.GetFromJsonAsync<ResultsTable[]>(path);
        ToDisplay = Results.ToList();
        while (ToDisplay != null)
        {
            await ShowDataset();
            break;
        }
        await _doughnutChartJs.Update();
    }
    protected override void OnInitialized()
    {
        _config = new PieConfig
        {
            Options = new PieOptions(true)
            {
                Title = new OptionsTitle
                {
                    Display = false,
                    Text = "Doughnut Chart for Popular Words in Software Engineer's Job Description ",
                    FontSize = 40
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                },
                Legend = new Legend
                {
                    Display = true,
                    Position = ChartJS.Common.Enums.Position.Right,
                    Labels = new LegendLabels
                    {
                        UsePointStyle = true
                    }
                }
            }
        };
    }
    private async Task ShowDataset()
    {
        if (_config.Data.Datasets.Count > 0)
        {
            _config.Data.Datasets.Clear();
        }
        var pieSet = new PieDataset
        {
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };
        _config.Data.Labels.AddRange(ToDisplay.Select(t => t.WordGroup));
        // determine the number of data points to add
        var count = ToDisplay.Count();

        var rand = new Random();
        pieSet.AddRange(ToDisplay.Select(r => r.Count));
        pieSet.BackgroundColor = Enumerable.Range(0, count).Select(i => ColorUtil.RandomColorString()).ToArray();

        _config.Data.Datasets.Add(pieSet);
        await _doughnutChartJs.Update();
    }

}