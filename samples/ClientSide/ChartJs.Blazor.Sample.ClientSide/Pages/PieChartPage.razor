@page "/PieChart"
@inject HttpClient Http
@using System.Net.Http.Json;
@using System.Globalization
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.Sample.Shared.Services

<h2 class="text-center">PieChart for Popular Words in Software Engineer's Job Description </h2>
<br />
<Chart @ref="_pieChartJs"
       Config="@_config"
       TConfig="PieConfig"
       Width="600"
       Height="300" />
@if (ToDisplay == null)
{
    <div>loading .....</div>
}
@code {
    private PieConfig _config;
    private Chart<PieConfig> _pieChartJs;
    public List<ResultsTable> ToDisplay { get; set; } = new List<ResultsTable>();

    protected override async Task OnInitializedAsync()
    {
        string path = "JsonFolder/results.json";
        var Results = await Http.GetFromJsonAsync<ResultsTable[]>(path);
        ToDisplay = Results.ToList();
        while (ToDisplay != null)
        {
            await ShowDataset();
            break;
        }
        await _pieChartJs.Update();
    }
    protected override void OnInitialized()
    {
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Title = new OptionsTitle
                {
                    Display = false,
                    Text = "PieChart for Popular Words in Software Engineer's Job Description ",
                    FontSize = 40
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                },
                Legend = new Legend
                {
                    Display = true,
                    Position = ChartJS.Common.Enums.Position.Right,
                    Labels = new LegendLabels
                    {
                        UsePointStyle = true,
                        FontColor = "black"
                    }
                }
            }
        };
    }

    private async Task AddData()
    {
        var dataset = _config.Data.Datasets.LastOrDefault();
        if (dataset == null) return;

        var rand = new Random();
        var newVal = 1 + rand.NextDouble() * 10;
        _config.Data.Labels.Add(newVal.ToString(CultureInfo.InvariantCulture));
        dataset.Add(newVal);
        dataset.BackgroundColor = dataset.BackgroundColor.IndexedValues.Append(ColorUtil.RandomColorString()).ToArray();

        await _pieChartJs.Update();
    }

    private async Task RemoveData()
    {
        var dataset = _config.Data.Datasets.LastOrDefault();
        if (dataset == null || dataset.Data.Count < 1) return;

        _config.Data.Labels.RemoveAt(_config.Data.Labels.Count - 1);
        dataset.RemoveAt(dataset.Data.Count - 1);

        await _pieChartJs.Update();
    }

    private async Task AddDataset()
    {
        var pieSet = new PieDataset
        {
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };

        // determine the number of data points to add
        var count = ToDisplay.Count();

        var rand = new Random();
        pieSet.AddRange(ToDisplay.Select(r => r.Count));
        pieSet.BackgroundColor = Enumerable.Range(0, count).Select(i => ColorUtil.RandomColorString()).ToArray();

        _config.Data.Datasets.Add(pieSet);
        await _pieChartJs.Update();
    }
    private async Task ShowDataset()
    {
        if (_config.Data.Datasets.Count > 0)
        {
            _config.Data.Datasets.Clear();
        }
        var pieSet = new PieDataset
        {
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };
        _config.Data.Labels.AddRange(ToDisplay.Select(t => t.WordGroup));
        // determine the number of data points to add
        var count = ToDisplay.Count();

        var rand = new Random();
        pieSet.AddRange(ToDisplay.Select(r => r.Count));
        pieSet.BackgroundColor = Enumerable.Range(0, count).Select(i => ColorUtil.RandomColorString()).ToArray();

        _config.Data.Datasets.Add(pieSet);
        await _pieChartJs.Update();
    }

    private async Task RemoveDataset()
    {
        if (_config.Data.Datasets.Count > 1)
        {
            _config.Data.Datasets.RemoveAt(_config.Data.Datasets.Count - 1);
            await _pieChartJs.Update();
        }
    }

}