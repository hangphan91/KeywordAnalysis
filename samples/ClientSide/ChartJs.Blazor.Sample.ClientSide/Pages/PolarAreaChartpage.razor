@page "/PolarAreaChart"
@page "/PolarAreaChart/{JobTitle}"
@inject HttpClient Http
@using System.Net.Http.Json;
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PolarAreaChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.Sample.Shared.Services

<h2 class="text-center">Polar Chart for Popular Words in @JobTitle's Job Description</h2>
<br />
<Chart @ref="_polarChartJs"
       Config="@_config"
       TConfig="PolarAreaConfig"
       Width="600"
       Height="300" />

@code {
    [Parameter]
    public string JobTitle { get; set; }
    private PolarAreaConfig _config;
    private Chart<PolarAreaConfig> _polarChartJs;
    public List<ResultsTable> ToDisplay { get; set; } = new List<ResultsTable>();

    protected override async Task OnInitializedAsync()
    {
        string path = "JsonFolder/results.json";
        var Results = await Http.GetFromJsonAsync<ResultsTable[]>(path);
        ToDisplay = Results.ToList().OrderByDescending(t => t.Count).Take(10).ToList();
        while (ToDisplay != null)
        {
            await ShowDataset();
            break;
        }
        await _polarChartJs.Update();
    }
    protected override void OnInitialized()
    {
        _config = new PolarAreaConfig
        {
            Options = new PolarAreaOptions
            {
                Title = new OptionsTitle
                {
                    Display = false,
                    Text = "Sample chart from Blazor"
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                },
                Legend = new Legend
                {
                    Display = true,
                    Position = ChartJS.Common.Enums.Position.Bottom,
                    Labels = new LegendLabels
                    {
                        UsePointStyle = true
                    }
                }
            }
        };

    }
    private async Task ShowDataset()
    {
        if (_config.Data.Datasets.Count > 0)
        {
            _config.Data.Datasets.Clear();
        }
        var pieSet = new PolarAreaDataset
        {
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };
        _config.Data.Labels.AddRange(ToDisplay.Select(t => t.WordGroup));
        // determine the number of data points to add
        var count = ToDisplay.Count();

        pieSet.AddRange(ToDisplay.Select(r => r.Count));
        pieSet.BackgroundColor = Enumerable.Range(0, count).Select(i => ColorUtil.RandomColorString()).ToArray();

        _config.Data.Datasets.Add(pieSet);
        await _polarChartJs.Update();
    }

}
